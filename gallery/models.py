from io import BytesIO
from PIL import Image

from django.core.files import File
from django.db import models


class Collection(models.Model):
    collection_name = models.CharField(max_length=280, help_text='Name of collection. Required.')
    slug = models.CharField(max_length=140, help_text='Lowercase, hyphen-separated slug for links, eg "secular-geometry". Unique. Required.')
    year = models.PositiveIntegerField(null=True, blank=True, help_text='Simple year input for single year. Optional.')
    date_start = models.DateField(null=True, blank=True, help_text='If colllection span years, enter start date. Displayed as year. Optional.')
    date_end = models.DateField(null=True, blank=True, help_text='If colllection span years, enter end date. Displayed as year. Optional.')
    description = models.TextField(help_text='Textfield for collection description. Accepts linebreaks. Required.')

    class Meta:
        ordering = ('collection_name',)

    def __str__(self):
        return self.collection_name


class Piece(models.Model):
    collection = models.ForeignKey(Collection, on_delete=models.SET_NULL, null=True, blank=True, help_text='Name of collection piece is part of. Optional.')
    piece_name = models.CharField(max_length=280, help_text='Name of piece. Required.')
    slug = models.CharField(max_length=140, help_text='Lowercase, hyphen-separated slug for links, eg "wring-finger". Unique. Required.')
    size = models.CharField(max_length=140, null=True, blank=True, help_text='Size in whatever format. Optional.')
    price = models.DecimalField(max_digits=6, decimal_places=2, null=True, blank=True, help_text='Price in decimal. Optional.')
    image = models.ImageField(upload_to='uploads/', null=True, blank=True, help_text='Upload image. Ideally formatted to less than 1000px width and in .webp. Optional.')
    thumbnail = models.ImageField(upload_to='uploads/thumbs/', null=True, blank=True, help_text='Autogenerated from image if not uploaded separately. Advise ignore.')
    date = models.DateField(null=True, blank=True, help_text='Date created. Otherwise will use collection date if exists. Optional.')
    date_added = models.DateTimeField(auto_now_add=True)
    description = models.TextField(help_text='Textfield for piece description. Accepts linebreaks. Required.')

    class Meta:
        ordering = ('collection',)

    def __str__(self):
        return self.piece_name

    def get_image(self):
        if self.image:
            return 'https://8000-sjecollins-artistsite-qk15k8czxo7.ws-eu81.gitpod.io/' + self.image.url
        return ''

    def get_thumbnail(self):
        if self.thumbnail:
            return 'https://8000-sjecollins-artistsite-qk15k8czxo7.ws-eu81.gitpod.io/' + self.thumbnail.url
        else:
            if self.image:
                self.thumbnail = self.make_thumbnail(self.image)
                self.save()
                return 'https://8000-sjecollins-artistsite-qk15k8czxo7.ws-eu81.gitpod.io/' + self.thumbnail.url
            else:
                return ''

    def make_thumbnail(self, image, size=(300, 300)):
        img = Image.open(image)
        img.convert('RGB')
        img.thumbnail(size)

        thumb_io = BytesIO()
        img.save(thumb_io, 'PNG', quality=85)

        thumbnail = File(thumb_io, name=image.name)

        return thumbnail
